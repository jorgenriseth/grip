#############################
# MODELING WORKFLOWS
#############################
rule diffusion_model:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/diffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/diffusion.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/diffusion.csv",
    threads: config["sim_threads"]
    run:
        cmd = (
            "OMP_NUM_THREADS=1 mpirun -n {threads}" * (threads > 1)
            + " python '{input.script}'"
            + " --input '{input.data}'"
            + " --output '{output.hdf}'"
            + " --model 'fasttransfer'"
            + " --visual "
        )
        shell(cmd)



rule diffusion_model_singlecomp:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/diffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/diffusion_singlecomp.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/diffusion_singlecomp.csv",
        # xdmf="DATA/{subjectid}/MODELING/resolution{res}/visual/diffusion_singlecomp.xdmf",
    threads: config["sim_threads"]
    run:
        cmd = (
            "OMP_NUM_THREADS=1 mpirun -n {threads}" * (threads > 1)
            + " python '{input.script}'"
            + " --input '{input.data}'"
            + " --output '{output.hdf}'"
            + " --visual "
        )
        shell(cmd)


rule multidiffusion_model:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/multidiffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/multidiffusion.hdf",
        total="DATA/{subjectid}/MODELING/resolution{res}/multidiffusion_total.hdf",
        # xdmf="DATA/{subjectid}/MODELING/resolution{res}/visual/multidiffusion.xdmf",
    threads: config["sim_threads"]
    run:
        cmd = (
            "OMP_NUM_THREADS=1 mpirun -n {threads}" * (threads > 1)
            + " python '{input.script}'"
            + " --input '{input.data}'"
            + " --output '{output.hdf}'"
            + " --output_total '{output.total}'"
            + " --visual "
        )
        shell(cmd)

rule baseline_models:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/diffusion.hdf",
            subjectid=config["subjects"],
            res=config["resolution"]
        ),
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/multidiffusion_total.hdf",
            subjectid=config["subjects"],
            res=config["resolution"]
        )


rule diffusion_model_data:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/diffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/diffusion_data.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/diffusion_data.csv",
        # xdmf="DATA/{subjectid}/MODELING/resolution{res}/visual/diffusion.xdmf",
    threads: config["sim_threads"]
    run:
        cmd = (
            "OMP_NUM_THREADS=1 mpirun -n {threads}" * (threads > 1)
            + " python '{input.script}'"
            + " --input '{input.data}'"
            + " --output '{output.hdf}'"
            + " --k 'inf'"
            + " --visual"
        )
        shell(cmd)


rule diffusion_model_singlecomp_data:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/diffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/diffusion_singlecomp_data.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/diffusion_singlecomp_data.csv",
        # xdmf="DATA/{subjectid}/MODELING/resolution{res}/visual/diffusion.xdmf",
    threads: config["sim_threads"]
    shadow:
        config["shadow"]
    run:
        cmd = (
            "OMP_NUM_THREADS=1 mpirun -n {threads}" * (threads > 1)
            + " python '{input.script}'"
            + " --input '{input.data}'"
            + " --output '{output.hdf}'"
            + " --k 'inf'"
            + " --model 'singlecomp'"
            + " --visual "
        )
        shell(cmd)


rule multidiffusion_model_data:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/multidiffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/multidiffusion_data.hdf",
        total="DATA/{subjectid}/MODELING/resolution{res}/multidiffusion_total_data.hdf",
        # xdmf="DATA/{subjectid}/MODELING/resolution{res}/visual/multidiffusion.xdmf",
    threads: config["sim_threads"]
    run:
        cmd = (
            "OMP_NUM_THREADS=1 mpirun -n {threads}" * (threads > 1)
            + " python '{input.script}'"
            + " --input '{input.data}'"
            + " --output '{output.hdf}'"
            + " --output_total '{output.total}'"
            + " --ke 'inf'"
            + " --kp 'inf'"
            + " --visual "
        )
        shell(cmd)

rule baseline_models_data:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/diffusion_data.hdf",
            subjectid=config["subjects"],
            res=config["resolution"]
        ),
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/diffusion_singlecomp_data.hdf",
            subjectid=config["subjects"],
            res=config["resolution"]
        ),
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/multidiffusion_total_data.hdf",
            subjectid=config["subjects"],
            res=config["resolution"]
        )

#############################
# PARAMETER VARIATION WORKFLOWS
#############################
D_e = 1.3e-4
D_p = D_e * 3
phi_e = 0.20
phi_p = 0.02
t_ep = 2.9e-2
t_pb = 0.2e-5
k_p = 3.7e-4
k_e = 1.0e-5

phi_tot = phi_e + phi_p

t_pb_max = 2.1e-5
k_e_max = 2.6e-5
D_p_list = [x * D_e for x in [3, 10, 100]]
t_ep_list = [5e-4, 3.1e-2]
t_pb_list = [scale * t_pb_max for scale in [0.0, 0.1, 1.0]]
k_e_list = [scale * k_e_max for scale in [1e-3, 1e-2, 1.0]]

rule diffusion_singlecomp_varying_parameters_workflow:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/diffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/singlecomp/De{D}_tpb{tpb}_ke{ke}.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/singlecomp/De{D}_tpb{tpb}_ke{ke}.csv",
    threads: 1  #config["sim_threads"]
    params:
        r=lambda wc: float(wc.tpb) / phi_e,
        k=lambda wc: float(wc.ke) / phi_e,
    shell:
        "OMP_NUM_THREADS=1 mpirun -n {threads}"
        " python {input.script}"
        " --input {input.data}"
        " --output {output.hdf}"
        " --D {wildcards.D}"
        " --r {params.r}"
        " --k {params.k}"


rule diffusion_fasttransfer_varying_parameters_workflow:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/diffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/fasttransfer/De{De}_Dp{Dp}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/fasttransfer/De{De}_Dp{Dp}_tpb{tpb}_ke{ke}_kp{kp}.csv",
    threads: 1  # config["sim_threads"]
    params:
        D=lambda wc: (phi_p * float(wc.Dp) + phi_e * float(wc.De)) / phi_tot,
        r=lambda wc: float(wc.tpb) / phi_tot,
        k=lambda wc: (float(wc.kp) + float(wc.ke)) / phi_tot
    shell:
        "OMP_NUM_THREADS=1 mpirun -n {threads}"
        " python {input.script}"
        " --input {input.data}"
        " --output {output.hdf}"
        " --D {params.D}"
        " --r {params.r}"
        " --k {params.k}"


rule multidiffusion_varying_parameters_workflow:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/multidiffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/multidiffusion/De{De}_Dp{Dp}_tep{tep}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/multidiffusion/De{De}_Dp{Dp}_tep{tep}_tpb{tpb}_ke{ke}_kp{kp}.csv",
    threads: 1  # config["sim_threads"]
    shell:
        "OMP_NUM_THREADS=1 mpirun -n {threads}"
        " python gmri2fem/models/multidiffusion_model.py"
        " --input {input.data}"
        " --output {output.hdf}"
        " --De {wildcards.De}"
        " --Dp {wildcards.Dp}"
        " --tep {wildcards.tep}"
        " --tpb {wildcards.tpb}"
        " --ke {wildcards.ke}"
        " --kp {wildcards.kp}"



from gmri2fem.utils import float_string_formatter
from gmri2fem import utils
from functools import partial

fsformat = partial(utils.float_string_formatter, digits=2)

rule diffusion_singlecomp_varying_parameters:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters/singlecomp/De{D}_tpb{tpb}_ke{ke}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            D=fsformat(D_e),
            tpb=map(fsformat, t_pb_list),
            ke=map(fsformat, k_e_list),
        ),

rule diffusion_fasttransfer_varying_parameters:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters/fasttransfer/De{De}_Dp{Dp}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            Dp=map(fsformat, D_p_list),
            tpb=map(fsformat, t_pb_list),
            ke=map(fsformat, k_e_list),
            kp=fsformat(k_p)
        ),

rule multidiffusion_varying_parameters:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters/multidiffusion/De{De}_Dp{Dp}_tep{tep}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            Dp=map(fsformat, D_p_list),
            tep=map(fsformat, t_ep_list),
            tpb=map(fsformat, t_pb_list),
            ke=map(fsformat, k_e_list),
            kp=fsformat(k_p)
        ),


rule varying_parameters:
    input:
        twocomp=expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters/multidiffusion/De{De}_Dp{Dp}_tep{tep}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            Dp=map(fsformat, D_p_list),
            tep=map(fsformat, t_ep_list),
            tpb=map(fsformat, t_pb_list),
            ke=map(fsformat, k_e_list),
            kp=fsformat(k_p)
        ),
        singlecomp=expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters/singlecomp/De{D}_tpb{tpb}_ke{ke}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            D=fsformat(D_e),
            tpb=map(fsformat, t_pb_list),
            ke=map(fsformat, k_e_list),
        ),
        fasttransfer=expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters/fasttransfer/De{De}_Dp{Dp}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            Dp=map(fsformat, D_p_list),
            tpb=map(fsformat, t_pb_list),
            ke=map(fsformat, k_e_list),
            kp=fsformat(k_p)
        ),


################################
### Single-parameter workflows
################################
rule multidiffusion_varying_single_parameter_workflow:
    input:
        data="DATA/{subjectid}/MODELING/resolution{res}/data.hdf",
        script="gmri2fem/models/multidiffusion_model.py",
    output:
        hdf="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/multidiffusion/{paramname}{value}.hdf",
        csv="DATA/{subjectid}/MODELING/resolution{res}/varying_{paramname}/multidiffusion/{paramname}{value}.csv",
    threads: 1
    run:
        cmd = (
            "OMP_NUM_THREADS=1 mpirun -n {threads}" * (threads > 1)
            + " python '{input.script}'"
            + " --input '{input.data}'"
            + " --output '{output.hdf}'"
            + " --{wildcards.paramname} {wildcards.value}"
        )
        shell(cmd)


rule multidiffusion_varying_phip:
    input:
        expand("DATA/{subjectid}/MODELING/resolution{res}/varying_phip/multidiffusion/phip{phip}.csv",
            subjectid=config["subjects"], res=config["resolution"], phip=map(fsformat, [0.1, 0.02, 0.03, 0.04]))


rule multidiffusion_varying_Dp:
    input:
        expand("DATA/{subjectid}/MODELING/resolution{res}/varying_Dp/multidiffusion/Dp{Dp}.csv",
            subjectid=config["subjects"], res=config["resolution"], Dp=map(fsformat, [x * D_e for x in [3, 10, 100]]))


rule multidiffusion_varying_Dp_data:
    input:
        expand("DATA/{subjectid}/MODELING/resolution{res}/varying_Dp/multidiffusion_data/Dp{Dp}.csv",
            subjectid=config["subjects"], res=config["resolution"], Dp=map(fsformat, [x * D_e for x in [3, 10, 100]]))


rule multidiffusion_varying_tep:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_tep/multidiffusion/tep{tep}.csv",
             subjectid=config["subjects"], res=config["resolution"], tep=map(fsformat, [3.1e-4, 3.1e-3, 3.1e-2]))


rule multidiffusion_varying_tpb:
    input:
        expand("DATA/{subjectid}/MODELING/resolution{res}/varying_tpb/multidiffusion/tpb{tpb}.csv",
            subjectid=config["subjects"], res=config["resolution"], tpb=map(fsformat, [x*t_pb_max for x in [0, 1e-2, 1e-1, 1]]))


rule multidiffusion_varying_ke:
    input:
        expand("DATA/{subjectid}/MODELING/resolution{res}/varying_ke/multidiffusion/ke{ke}.csv",
            subjectid=config["subjects"], res=config["resolution"], ke=map(fsformat, [x*k_e_max for x in [1e-3, 1e-2, 1e-1, 1, 1e1, 1e2, 1e3]]))


rule multidiffusion_varying_kp:
    input:
        expand("DATA/{subjectid}/MODELING/resolution{res}/varying_kp/multidiffusion/kp{kp}.csv",
            subjectid=config["subjects"], res=config["resolution"], kp=map(fsformat, [0.9e-4, 3.7e-4, 7.4e-4]))


rule varying_tep_ke:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_tep_ke/multidiffusion/De{De}_Dp{Dp}_tep{tep}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            Dp=fsformat(D_p),
            tpb=fsformat(t_pb),
            kp=fsformat(k_p),
            tep=map(fsformat, [x * t_ep for x in [1.0, 1e-2, 1e-3, 1e-4]]),
            ke=map(fsformat, [x*k_e_max for x in [1e-1, 1, 1e1]])
        ),
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_tep_ke/fasttransfer/De{De}_Dp{Dp}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            Dp=fsformat(D_p),
            tpb=fsformat(t_pb),
            kp=fsformat(k_p),
            ke=map(fsformat, [x*k_e_max for x in [1e-1, 1, 1e1]])
        ),
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_tep_ke/singlecomp/De{De}_tpb{tpb}_ke{ke}.csv",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            tpb=fsformat(t_pb),
            ke=map(fsformat, [x*k_e_max for x in [1e-1, 1, 1e1]])
        )


rule diffusion_fasttransfer_varying_Dp:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters/fasttransfer/De{De}_Dp{Dp}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            tpb=fsformat(t_pb),
            ke=fsformat(k_e),
            kp=fsformat(k_p),
            Dp=map(fsformat, [x * D_e for x in [3, 10, 100]]),
        ),


rule multidiffusion_varying_parameters_data:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters_data/multidiffusion/De{De}_Dp{Dp}_tep{tep}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            tep=fsformat(t_ep),
            tpb=fsformat(t_pb),
            ke='inf',
            kp='inf',
            Dp=map(fsformat, [x * D_e for x in [3, 10, 100]]),
        )


rule diffusion_fasttransfer_varying_parameters_data:
    input:
        expand(
            "DATA/{subjectid}/MODELING/resolution{res}/varying_parameters_data/fasttransfer/De{De}_Dp{Dp}_tpb{tpb}_ke{ke}_kp{kp}.hdf",
            subjectid=config["subjects"],
            res=config["resolution"],
            De=fsformat(D_e),
            tep=fsformat(t_ep),
            tpb=fsformat(t_pb),
            ke='inf',
            kp='inf',
            Dp=map(fsformat, [x * D_e for x in [3, 10, 100]]),
        )

rule visualize_differences_workflow:
    input:
        model="DATA/{subjectid}/MODELING/resolution{res}/{model}.hdf",
        reference="DATA/{subjectid}/MODELING/resolution{res}/{reference}.hdf",
        timestamps="DATA/{subjectid}/timestamps.txt",
    output:
        "DATA/{subjectid}/MODELING/resolution{res}/visual/{model}-{reference}.xdmf",
    threads: config["sim_threads"]
    shell:
        "python3 gmri2fem/analysis/visualize_differences.py "
        "--model {input.model} "
        "--reference {input.reference} "
        "--output {output} "
        "--timestamps {input.timestamps}"


